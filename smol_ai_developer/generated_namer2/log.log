hi its me, 🐣the smol developer🐣! you said you wanted:
This project is a naming scheme generator.
It has to be subject to the following tech stack:
1. Programming language: wherever possible, but not limited to python
It has to be subject to the following specification:
1. Having an importable and callable method in python that returns a random name
2. Said name has to be a pair of an adjective and a noun starting with the same letter to the likes of docker container naming convention
3. Adjective and noun have to be of specific theme. Default themes should emotional description, e.g. dramatic for adjective and an abstract entity like manifold for noun.
4. Apart from the default themes, theme pair should be customizable by providing a json with list of available options per each letter of the English alphabet. Providing the json can be constrained to a certain folder inside the project structure.
5. it has to have tests, evaluating extensiveness of fulfilling the above specifications
86 tokens in prompt: You are an AI developer who is trying to write a p
185 tokens in prompt: This project is a naming scheme generator.
It has 
[
    "naming_scheme_generator/__init__.py",
    "naming_scheme_generator/generator.py",
    "naming_scheme_generator/themes/default_theme.json",
    "naming_scheme_generator/themes/__init__.py",
    "naming_scheme_generator/themes/custom_theme_example.json",
    "tests/__init__.py",
    "tests/test_generator.py",
    "tests/test_themes.py"
]
144 tokens in prompt: You are an AI developer who is trying to write a p
185 tokens in prompt: This project is a naming scheme generator.
It has 
the app is: naming scheme generator

the files we have decided to generate are: main.py, themes.py, custom_themes.py, test_naming_scheme_generator.py

Shared dependencies:
1. Function names:
   - generate_name(theme_adjective, theme_noun)
   - load_custom_theme(file_path)
2. Data schemas:
   - Theme (adjectives: List[str], nouns: List[str])
   - CustomTheme (file_path: str, theme: Theme)
3. Exported variables:
   - default_theme (instance of Theme)
4. JSON structure for custom themes:
   - { "A": { "adjectives": ["adjective1", "adjective2"], "nouns": ["noun1", "noun2"] }, "B": {...}, ... }
5. Test function names:
   - test_generate_name_default_theme()
   - test_generate_name_custom_theme()
   - test_load_custom_theme()
shared_dependencies.md
the app is: naming scheme generator

the files we have decided to generate are: main.py, themes.py, custom_themes.py, test_naming_scheme_generator.py

Shared dependencies:
1. Function names:
   - generate_name(theme_adjective, theme_noun)
   - load_custom_theme(file_path)
2. Data schemas:
   - Theme (adjectives: List[str], nouns: List[str])
   - CustomTheme (file_path: str, theme: Theme)
3. Exported variables:
   - default_theme (instance of Theme)
4. JSON structure for custom themes:
   - { "A": { "adjectives": ["adjective1", "adjective2"], "nouns": ["noun1", "noun2"] }, "B": {...}, ... }
5. Test function names:
   - test_generate_name_default_theme()
   - test_generate_name_custom_theme()
   - test_load_custom_theme()
550 tokens in prompt: You are an AI developer who is trying to write a p
357 tokens in prompt: 
    We have broken up the program into per-file g
naming_scheme_generator/__init__.py
from .generator import generate_name, load_custom_theme
from .themes import default_theme
550 tokens in prompt: You are an AI developer who is trying to write a p
355 tokens in prompt: 
    We have broken up the program into per-file g
naming_scheme_generator/generator.py
import random
from typing import Dict, List
from .themes import default_theme

def generate_name(theme_adjective: Dict[str, List[str]], theme_noun: Dict[str, List[str]]) -> str:
    letter = random.choice(list(theme_adjective.keys()))
    adjective = random.choice(theme_adjective[letter])
    noun = random.choice(theme_noun[letter])
    return f"{adjective}_{noun}"

def load_custom_theme(file_path: str) -> Dict[str, List[str]]:
    with open(file_path, "r") as file:
        custom_theme = json.load(file)
    return custom_theme

def generate_name_with_theme(theme: str = "default") -> str:
    if theme == "default":
        theme_adjective = default_theme["adjectives"]
        theme_noun = default_theme["nouns"]
    else:
        custom_theme = load_custom_theme(theme)
        theme_adjective = custom_theme["adjectives"]
        theme_noun = custom_theme["nouns"]

    return generate_name(theme_adjective, theme_noun)
550 tokens in prompt: You are an AI developer who is trying to write a p
357 tokens in prompt: 
    We have broken up the program into per-file g
naming_scheme_generator/themes/default_theme.json
{
  "A": {
    "adjectives": ["anxious", "amazing"],
    "nouns": ["artifact", "ambience"]
  },
  "B": {
    "adjectives": ["bold", "bitter"],
    "nouns": ["boundary", "balance"]
  },
  "C": {
    "adjectives": ["curious", "calm"],
    "nouns": ["concept", "connection"]
  },
  "D": {
    "adjectives": ["dramatic", "daring"],
    "nouns": ["dimension", "dilemma"]
  },
  "E": {
    "adjectives": ["eager", "elusive"],
    "nouns": ["essence", "energy"]
  },
  "F": {
    "adjectives": ["fierce", "fascinating"],
    "nouns": ["foundation", "flow"]
  },
  "G": {
    "adjectives": ["graceful", "gloomy"],
    "nouns": ["growth", "gravity"]
  },
  "H": {
    "adjectives": ["happy", "harsh"],
    "nouns": ["harmony", "horizon"]
  },
  "I": {
    "adjectives": ["intriguing", "intense"],
    "nouns": ["illusion", "insight"]
  },
  "J": {
    "adjectives": ["joyful", "jaded"],
    "nouns": ["journey", "junction"]
  },
  "K": {
    "adjectives": ["keen", "kind"],
    "nouns": ["knowledge", "kaleidoscope"]
  },
  "L": {
    "adjectives": ["lively", "lonely"],
    "nouns": ["landscape", "limit"]
  },
  "M": {
    "adjectives": ["mysterious", "melancholic"],
    "nouns": ["manifold", "momentum"]
  },
  "N": {
    "adjectives": ["nervous", "noble"],
    "nouns": ["narrative", "notion"]
  },
  "O": {
    "adjectives": ["optimistic", "ominous"],
    "nouns": ["origin", "outcome"]
  },
  "P": {
    "adjectives": ["peaceful", "pensive"],
    "nouns": ["perspective", "paradox"]
  },
  "Q": {
    "adjectives": ["quizzical", "quiet"],
    "nouns": ["quandary", "quintessence"]
  },
  "R": {
    "adjectives": ["radiant", "reserved"],
    "nouns": ["reality", "reflection"]
  },
  "S": {
    "adjectives": ["serene", "sombre"],
    "nouns": ["symmetry", "spectrum"]
  },
  "T": {
    "adjectives": ["tranquil", "tense"],
    "nouns": ["transition", "threshold"]
  },
  "U": {
    "adjectives": ["unique", "unsettling"],
    "nouns": ["unity", "uncertainty"]
  },
  "V": {
    "adjectives": ["vibrant", "vague"],
    "nouns": ["vision", "void"]
  },
  "W": {
    "adjectives": ["wistful", "wonderful"],
    "nouns": ["wisdom", "wholeness"]
  },
  "X": {
    "adjectives": ["xenophobic", "xenial"],
    "nouns": ["xenoglossy", "xenolith"]
  },
  "Y": {
    "adjectives": ["yearning", "youthful"],
    "nouns": ["yonder", "yield"]
  },
  "Z": {
    "adjectives": ["zealous", "zen"],
    "nouns": ["zenith", "zephyr"]
  }
}
550 tokens in prompt: You are an AI developer who is trying to write a p
359 tokens in prompt: 
    We have broken up the program into per-file g
naming_scheme_generator/themes/__init__.py
from .default_theme import default_theme
from .custom_theme_example import custom_theme_example
550 tokens in prompt: You are an AI developer who is trying to write a p
359 tokens in prompt: 
    We have broken up the program into per-file g
naming_scheme_generator/themes/custom_theme_example.json
{
  "A": {
    "adjectives": ["amazing", "ambitious"],
    "nouns": ["apple", "ant"]
  },
  "B": {
    "adjectives": ["brave", "bold"],
    "nouns": ["bear", "boat"]
  },
  "C": {
    "adjectives": ["creative", "curious"],
    "nouns": ["cat", "cloud"]
  },
  "D": {
    "adjectives": ["determined", "daring"],
    "nouns": ["dog", "dolphin"]
  },
  "E": {
    "adjectives": ["eager", "energetic"],
    "nouns": ["elephant", "eagle"]
  },
  "F": {
    "adjectives": ["fearless", "friendly"],
    "nouns": ["fish", "fox"]
  },
  "G": {
    "adjectives": ["graceful", "generous"],
    "nouns": ["giraffe", "goat"]
  },
  "H": {
    "adjectives": ["happy", "humble"],
    "nouns": ["horse", "hamster"]
  },
  "I": {
    "adjectives": ["intelligent", "imaginative"],
    "nouns": ["iguana", "island"]
  },
  "J": {
    "adjectives": ["joyful", "jovial"],
    "nouns": ["jaguar", "jellyfish"]
  },
  "K": {
    "adjectives": ["kind", "keen"],
    "nouns": ["kangaroo", "koala"]
  },
  "L": {
    "adjectives": ["loving", "loyal"],
    "nouns": ["lion", "lizard"]
  },
  "M": {
    "adjectives": ["magnificent", "mindful"],
    "nouns": ["monkey", "mountain"]
  },
  "N": {
    "adjectives": ["noble", "nice"],
    "nouns": ["narwhal", "nightingale"]
  },
  "O": {
    "adjectives": ["optimistic", "observant"],
    "nouns": ["octopus", "ostrich"]
  },
  "P": {
    "adjectives": ["patient", "peaceful"],
    "nouns": ["penguin", "panda"]
  },
  "Q": {
    "adjectives": ["quick", "quiet"],
    "nouns": ["quail", "quokka"]
  },
  "R": {
    "adjectives": ["resilient", "respectful"],
    "nouns": ["rabbit", "rhino"]
  },
  "S": {
    "adjectives": ["strong", "sincere"],
    "nouns": ["shark", "sloth"]
  },
  "T": {
    "adjectives": ["thoughtful", "trustworthy"],
    "nouns": ["tiger", "turtle"]
  },
  "U": {
    "adjectives": ["unique", "understanding"],
    "nouns": ["unicorn", "urchin"]
  },
  "V": {
    "adjectives": ["vibrant", "valiant"],
    "nouns": ["vulture", "viper"]
  },
  "W": {
    "adjectives": ["wise", "witty"],
    "nouns": ["wolf", "whale"]
  },
  "X": {
    "adjectives": ["xenophilic", "xenodochial"],
    "nouns": ["xerus", "xenops"]
  },
  "Y": {
    "adjectives": ["youthful", "yielding"],
    "nouns": ["yak", "yellowtail"]
  },
  "Z": {
    "adjectives": ["zealous", "zestful"],
    "nouns": ["zebra", "zephyr"]
  }
}
550 tokens in prompt: You are an AI developer who is trying to write a p
353 tokens in prompt: 
    We have broken up the program into per-file g
tests/__init__.py
from tests.test_generator import test_generate_name_default_theme, test_generate_name_custom_theme
from tests.test_themes import test_load_custom_theme
550 tokens in prompt: You are an AI developer who is trying to write a p
351 tokens in prompt: 
    We have broken up the program into per-file g
tests/test_generator.py
import unittest
from naming_scheme_generator.generator import generate_name, load_custom_theme
from naming_scheme_generator.themes import default_theme

class TestGenerator(unittest.TestCase):

    def test_generate_name_default_theme(self):
        name = generate_name(default_theme.adjectives, default_theme.nouns)
        self.assertIsNotNone(name)
        self.assertTrue(isinstance(name, str))
        self.assertEqual(len(name.split(" ")), 2)
        self.assertEqual(name.split(" ")[0][0], name.split(" ")[1][0])

    def test_generate_name_custom_theme(self):
        custom_theme = load_custom_theme("naming_scheme_generator/themes/custom_theme_example.json")
        name = generate_name(custom_theme.adjectives, custom_theme.nouns)
        self.assertIsNotNone(name)
        self.assertTrue(isinstance(name, str))
        self.assertEqual(len(name.split(" ")), 2)
        self.assertEqual(name.split(" ")[0][0], name.split(" ")[1][0])

    def test_load_custom_theme(self):
        custom_theme = load_custom_theme("naming_scheme_generator/themes/custom_theme_example.json")
        self.assertIsNotNone(custom_theme)
        self.assertTrue(hasattr(custom_theme, "adjectives"))
        self.assertTrue(hasattr(custom_theme, "nouns"))

if __name__ == '__main__':
    unittest.main()
550 tokens in prompt: You are an AI developer who is trying to write a p
353 tokens in prompt: 
    We have broken up the program into per-file g
tests/test_themes.py
import json
import os
import unittest
from naming_scheme_generator import generator, themes

class TestThemes(unittest.TestCase):

    def test_load_custom_theme(self):
        custom_theme_path = "naming_scheme_generator/themes/custom_theme_example.json"
        custom_theme = themes.load_custom_theme(custom_theme_path)
        self.assertIsInstance(custom_theme, themes.Theme)

        with open(custom_theme_path, "r") as f:
            custom_theme_data = json.load(f)

        for letter, theme_data in custom_theme_data.items():
            self.assertEqual(custom_theme.adjectives[letter], theme_data["adjectives"])
            self.assertEqual(custom_theme.nouns[letter], theme_data["nouns"])

    def test_generate_name_default_theme(self):
        default_theme = themes.default_theme
        generated_name = generator.generate_name(default_theme.adjectives, default_theme.nouns)
        self.assertIsInstance(generated_name, str)
        self.assertEqual(len(generated_name.split(" ")), 2)

        adjective, noun = generated_name.split(" ")
        self.assertEqual(adjective[0], noun[0])

    def test_generate_name_custom_theme(self):
        custom_theme_path = "naming_scheme_generator/themes/custom_theme_example.json"
        custom_theme = themes.load_custom_theme(custom_theme_path)
        generated_name = generator.generate_name(custom_theme.adjectives, custom_theme.nouns)
        self.assertIsInstance(generated_name, str)
        self.assertEqual(len(generated_name.split(" ")), 2)

        adjective, noun = generated_name.split(" ")
        self.assertEqual(adjective[0], noun[0])

if __name__ == "__main__":
    unittest.main()
